// Google Java Formatに則った変換を行う
plugins {
  id 'com.github.sherter.google-java-format' version '0.9'
}

// このライブラリのバージョン
version '2.1.5'

// Javaプラグインを使ってこのプロジェクトをビルドする
apply plugin: 'java'

// $ gradleだけ実行した際に実行されるtask
defaultTasks 'clean', 'versionSet', 'googleJavaFormat', 'build' /*, 'javadoc'*/, 'copyJar'

// Javaソースのコンパイル時に使用するJavaバージョン互換性
sourceCompatibility = 1.8

// jarを生成するディレクトリ名
buildDir = 'build'
// ライブラリを生成するディレクトリ名。ビルドディレクトリへの相対パス
libsDirName = './'
// ドキュメントを生成するディレクトリ名。ビルドディレクトリへの相対パス
docsDirName = '../reference'

// Javadocを使って製品JavaソースのAPIドキュメントを生成する
//javadoc {
//  options.charSet = 'UTF-8'
//  options.encoding = 'UTF-8'
//}

// 
repositories {
  mavenCentral()
}

// 
configurations {
  provided
}

// プロジェクトのソースセット
sourceSets {
  main {
    compileClasspath += configurations.provided
  }
}

// プロジェクトに依存関係を追加する
dependencies {
  provided group: 'org.processing', name: 'core', version: '3.3.7'
  // working with gradle 5.x
  //testCompile group: 'junit', name: 'junit', version: '4.12'
  //compile fileTree(dir: 'lib', include: '**/*.jar')
  // working with gradle 7.2
  testImplementation 'junit:junit:4.13.2'
  implementation fileTree(dir: 'resources/lib', include: ['*.jar'])
}

// test時のエラーログを詳細化
test {
  testLogging {
    // テスト時の標準出力と標準エラー出力を表示する
    showStandardStreams true
    // イベントを出力する (TestLogEvent)
    events 'passed', 'failed'//, 'started', 'skipped'
    // 例外発生時の出力設定 (TestExceptionFormat)
    exceptionFormat 'full'
  }
}

// errorのdetailを出すように
gradle.projectsEvaluated {
  tasks.withType(JavaCompile){
    options.compilerArgs << "-Xlint:deprecation"
    options.compilerArgs << "-Xlint:unchecked"
  }
}

// ------------------------------------------------------------
// Version.javaを入れるディレクトリ
def VERSION_JAVA_FOLDER = 'src/main/java/oscP5'

// gradleでjar生成するバージョンと、javaのクラスファイルに定義するバージョンを一律にするtask
// https://www.gwtcenter.com/handling-version-number-uniformly-by-gradle
task versionSet(type: Copy) { 
  project.delete VERSION_JAVA_FOLDER + '/Version.java'
  from 'resources/gradle/Version.java'
  into VERSION_JAVA_FOLDER
  expand(version: version, buildDate: buildDate()) 
  dependsOn(['verifyGoogleJavaFormat', 'googleJavaFormat'])
}

// compileJavaの前にversionSetタスクが実行されるように
compileJava.dependsOn(['versionSet'])

// ------------------------------------------------------------
// コンパイルした日付を取得する
import java.text.SimpleDateFormat;

def buildDate() {
  def df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
  df.setTimeZone(TimeZone.getTimeZone("Asia/Tokyo"))
  return df.format(new Date())
}

// ------------------------------------------------------------
// バージョンなしのjarファイルの生成
// P5では、libraryフォルダと、ライブラリのフォルダ名が一致したjarファイルのみ読み込むため、
// バージョニングファイルは利用できない
task copyJar(type: Copy) { 
  project.delete "build/${rootProject.name}.jar"
  from "build"
  into 'library'
  include "${rootProject.name}-${version}.jar"
  rename "${rootProject.name}-(.*).jar", "${rootProject.name}.jar"
  dependsOn(['verifyGoogleJavaFormat', 'googleJavaFormat', 'compileJava'])
}

// copyJarはcompileJava後になるように
copyJar.dependsOn(['compileJava', 'jar'])
